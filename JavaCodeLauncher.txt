  // Debug: Log input values
  System.log("=== DEBUG: Input Values ===");
  System.log("scriptPath: " + scriptPath);
  System.log("environment: " + environment);
  System.log("===============================");

  // Build the PowerShell command with only environment parameter
  var psCommand = "& '" + scriptPath + "'";

  // Add mandatory Environment parameter
  if (environment) {
      psCommand += " -Environment '" + environment + "'";
      System.log("Added environment parameter: " + environment);
  } else {
      System.log("ERROR: environment is null/undefined");
      throw new Error("Environment parameter is required but not provided");
  }

  System.log("Final PowerShell command: " + psCommand);

  try {
      // Execute the PowerShell script
      var psResult = host.executeScript(psCommand);

      // Log the raw output for debugging
      System.log("PowerShell script completed");
      System.log("Exit code: " + psResult.exitCode);
      System.log("Output: " + psResult.output);

      // Parse the output to extract Aria-specific results
      var outputLines = psResult.output.split('\n');
      var ariaResult = null;

      for (var i = 0; i < outputLines.length; i++) {
          var line = outputLines[i].trim();
          if (line.startsWith("ARIA_RESULT:")) {
              try {
                  var resultJson = line.substring("ARIA_RESULT:".length).trim();
                  ariaResult = JSON.parse(resultJson);
                  break;
              } catch (parseError) {
                  System.warn("Failed to parse Aria result JSON: " + parseError);
              }
          }
      }

      // Set the result
      if (ariaResult) {
          result = ariaResult;
          System.log("Execution Status: " + ariaResult.ExecutionStatus);

          // Set workflow status based on script result
          if (ariaResult.ExecutionStatus === "FAILED") {
              throw new Error("VM Tags automation failed with exit code: " + ariaResult.ExitCode);
          }
      } else {
          // Fallback result if no structured output found
          result = {
              ExecutionStatus: psResult.exitCode === 0 ? "SUCCESS" : "FAILED",
              ExitCode: psResult.exitCode,
              Output: psResult.output,
              RawResult: true
          };
      }

      System.log("VM Tags automation completed successfully");

  } catch (error) {
      System.error("PowerShell script execution failed: " + error);

      // Create error result
      result = {
          ExecutionStatus: "FAILED",
          ExitCode: -1,
          ErrorMessage: error.toString(),
          Timestamp: new Date().toISOString()
      };

      throw error;
  }