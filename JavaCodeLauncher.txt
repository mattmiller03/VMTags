  // Debug: Log input values
  System.log("=== DEBUG: Input Values ===");
  System.log("scriptPath: " + scriptPath);
  System.log("environment: " + environment);
  System.log("host: " + host);
  System.log("host type: " + typeof host);
  System.log("===============================");

  // Build the PowerShell command with only environment parameter
  var psCommand = "& '" + scriptPath + "'";

  // Add mandatory Environment parameter
  if (environment) {
      psCommand += " -Environment '" + environment + "'";
      System.log("Added environment parameter: " + environment);
  } else {
      System.log("ERROR: environment is null/undefined");
      throw new Error("Environment parameter is required but not provided");
  }

  System.log("Final PowerShell command: " + psCommand);

  try {
      // Try different PowerShell execution methods based on plugin version
      var psResult;

      if (typeof host.invokeScript === 'function') {
          System.log("Using invokeScript method");
          psResult = host.invokeScript(psCommand);
      } else if (typeof host.executeScript === 'function') {
          System.log("Using executeScript method");
          psResult = host.executeScript(psCommand);
      } else if (typeof host.runScript === 'function') {
          System.log("Using runScript method");
          psResult = host.runScript(psCommand);
      } else if (typeof host.execute === 'function') {
          System.log("Using execute method");
          psResult = host.execute(psCommand);
      } else {
          System.log("Available methods on host object:");
          for (var prop in host) {
              if (typeof host[prop] === 'function') {
                  System.log("  - " + prop);
              }
          }
          throw new Error("No suitable PowerShell execution method found on host object");
      }

      // Debug: Log the complete result object
      System.log("PowerShell execution result:");
      System.log("  psResult: " + psResult);
      System.log("  psResult type: " + typeof psResult);

      if (psResult) {
          System.log("  exitCode: " + psResult.exitCode);
          System.log("  output: " + psResult.output);
          System.log("  output type: " + typeof psResult.output);

          // Check for other possible property names
          for (var prop in psResult) {
              System.log("  " + prop + ": " + psResult[prop]);
          }
      }

      // Safely handle the output parsing
      var outputText = "";
      if (psResult && psResult.output) {
          outputText = psResult.output;
      } else if (psResult && psResult.stdout) {
          outputText = psResult.stdout;
      } else if (psResult && typeof psResult === 'string') {
          outputText = psResult;
      } else {
          System.log("No output found in result object");
          outputText = "";
      }

      System.log("Output text to parse: " + outputText);

      // Parse the output to extract Aria-specific results
      var ariaResult = null;
      if (outputText) {
          var outputLines = outputText.split('\n');

          for (var i = 0; i < outputLines.length; i++) {
              var line = outputLines[i].trim();
              if (line.startsWith("ARIA_RESULT:")) {
                  try {
                      var resultJson = line.substring("ARIA_RESULT:".length).trim();
                      ariaResult = JSON.parse(resultJson);
                      break;
                  } catch (parseError) {
                      System.warn("Failed to parse Aria result JSON: " + parseError);
                  }
              }
          }
      }

      // Set the result
      if (ariaResult) {
          result = ariaResult;
          System.log("Execution Status: " + ariaResult.ExecutionStatus);

          // Set workflow status based on script result
          if (ariaResult.ExecutionStatus === "FAILED") {
              throw new Error("VM Tags automation failed with exit code: " + ariaResult.ExitCode);
          }
      } else {
          // Fallback result if no structured output found
          var exitCode = 0;
          if (psResult && psResult.exitCode !== undefined) {
              exitCode = psResult.exitCode;
          }

          result = {
              ExecutionStatus: exitCode === 0 ? "SUCCESS" : "FAILED",
              ExitCode: exitCode,
              Output: outputText,
              RawResult: true
          };
      }

      System.log("VM Tags automation completed successfully");

  } catch (error) {
      System.error("PowerShell script execution failed: " + error);

      // Create error result
      result = {
          ExecutionStatus: "FAILED",
          ExitCode: -1,
          ErrorMessage: error.toString(),
          Timestamp: new Date().toISOString()
      };

      throw error;
  }