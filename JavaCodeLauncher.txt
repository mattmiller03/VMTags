  // Debug: Log input values
  System.log("=== DEBUG: Input Values ===");
  System.log("scriptPath: " + scriptPath);
  System.log("environment: " + environment);
  System.log("===============================");

  // Build the PowerShell command with only environment parameter
  var psCommand = "& '" + scriptPath + "'";

  // Add mandatory Environment parameter
  if (environment) {
      psCommand += " -Environment '" + environment + "'";
      System.log("Added environment parameter: " + environment);
  } else {
      System.log("ERROR: environment is null/undefined");
      throw new Error("Environment parameter is required but not provided");
  }

  System.log("Final PowerShell command: " + psCommand);

  try {
      // Execute PowerShell script using invokeScript
      System.log("Using invokeScript method");
      var psResult = host.invokeScript(psCommand);

      // Debug: Log the result properties using correct method names
      System.log("PowerShell execution completed");
      System.log("psResult object type: " + typeof psResult);

      // Try different property names for PowerShell plugin
      var exitCode = 0;
      var outputText = "";

      try {
          exitCode = psResult.getExitCode ? psResult.getExitCode() : 0;
          System.log("Exit code: " + exitCode);
      } catch (e) {
          System.log("Could not get exit code: " + e);
      }

      try {
          outputText = psResult.getInvocationResult ? psResult.getInvocationResult() : "";
          System.log("Output (getInvocationResult): " + outputText);
      } catch (e) {
          System.log("Could not get invocation result: " + e);
      }

      // Try alternative property names
      if (!outputText) {
          try {
              outputText = psResult.getOutput ? psResult.getOutput() : "";
              System.log("Output (getOutput): " + outputText);
          } catch (e) {
              System.log("Could not get output: " + e);
          }
      }

      if (!outputText) {
          try {
              outputText = psResult.getResultAsString ? psResult.getResultAsString() : "";
              System.log("Output (getResultAsString): " + outputText);
          } catch (e) {
              System.log("Could not get result as string: " + e);
          }
      }

      System.log("Final output text: " + outputText);
      System.log("Final exit code: " + exitCode);

      // Parse the output to extract Aria-specific results
      var ariaResult = null;
      if (outputText && outputText.length > 0) {
          var outputLines = outputText.split('\n');

          for (var i = 0; i < outputLines.length; i++) {
              var line = outputLines[i].trim();
              if (line.indexOf("ARIA_RESULT:") === 0) {
                  try {
                      var resultJson = line.substring("ARIA_RESULT:".length).trim();
                      ariaResult = JSON.parse(resultJson);
                      System.log("Parsed Aria result: " + JSON.stringify(ariaResult));
                      break;
                  } catch (parseError) {
                      System.warn("Failed to parse Aria result JSON: " + parseError);
                  }
              }
          }
      }

      // Set the result
      if (ariaResult) {
          result = ariaResult;
          System.log("Execution Status: " + ariaResult.ExecutionStatus);

          // Set workflow status based on script result
          if (ariaResult.ExecutionStatus === "FAILED") {
              throw new Error("VM Tags automation failed with exit code: " + ariaResult.ExitCode);
          }
      } else {
          // Fallback result if no structured output found
          result = {
              ExecutionStatus: exitCode === 0 ? "SUCCESS" : "FAILED",
              ExitCode: exitCode,
              Output: outputText,
              RawResult: true
          };
      }

      System.log("VM Tags automation completed successfully");

  } catch (error) {
      System.error("PowerShell script execution failed: " + error);

      // Create error result
      result = {
          ExecutionStatus: "FAILED",
          ExitCode: -1,
          ErrorMessage: error.toString(),
          Timestamp: new Date().toISOString()
      };

      throw error;
  }