  // Debug: Log input values
  System.log("=== DEBUG: Input Values ===");
  System.log("scriptPath: " + scriptPath);
  System.log("environment: " + environment);
  System.log("===============================");

  // Build the PowerShell command with only environment parameter
  var psCommand = "& '" + scriptPath + "'";

  // Add mandatory Environment parameter
  if (environment) {
      psCommand += " -Environment '" + environment + "'";
      System.log("Added environment parameter: " + environment);
  } else {
      System.log("ERROR: environment is null/undefined");
      throw new Error("Environment parameter is required but not provided");
  }

  System.log("Final PowerShell command: " + psCommand);

  try {
      // Execute PowerShell script using invokeScript
      System.log("Using invokeScript method");
      var psResult = host.invokeScript(psCommand);

      // Debug: Log the result properties
      System.log("PowerShell execution completed");

      var exitCode = psResult.getExitCode ? psResult.getExitCode() : 0;
      System.log("Exit code: " + exitCode);

      // Try to get any output - PowerShell might be sending output to different streams
      var outputText = "";

      // Try different output methods
      try {
          var standardOut = psResult.getInvocationResult ? psResult.getInvocationResult() : "";
          if (standardOut) outputText += standardOut;
      } catch (e) {
          System.log("No standard output: " + e);
      }

      // Try error stream (in case output is going there)
      try {
          var errorOut = psResult.getErrorResult ? psResult.getErrorResult() : "";
          if (errorOut) {
              System.log("Error output found: " + errorOut);
              outputText += errorOut;
          }
      } catch (e) {
          System.log("No error output method available");
      }

      // Try host output stream
      try {
          var hostOut = psResult.getHostOutput ? psResult.getHostOutput() : "";
          if (hostOut) {
              System.log("Host output found: " + hostOut);
              outputText += hostOut;
          }
      } catch (e) {
          System.log("No host output method available");
      }

      System.log("Final output text length: " + (outputText ? outputText.length : 0));
      if (outputText) {
          System.log("Output preview: " + outputText.substring(0, 200));
      }

      // For now, create a simple string result instead of complex object
      var executionStatus = (exitCode === 0) ? "SUCCESS" : "FAILED";

      // Set simple result to avoid type conversion issues
      result = executionStatus + " - Exit Code: " + exitCode;

      System.log("Setting result to: " + result);
      System.log("VM Tags automation completed with status: " + executionStatus);

  } catch (error) {
      System.error("PowerShell script execution failed: " + error);
      result = "FAILED - Error: " + error.toString();
      throw error;
  }